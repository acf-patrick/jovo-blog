{"ast":null,"code":"import{useEffect,useState}from\"react\";const useFetch=url=>{const[datas,setDatas]=useState(null);const[isPending,setIsPending]=useState(true);const[error,setError]=useState(null);useEffect(()=>{fetch(\"http://localhost:3001/blogs\").then(res=>{if(!res.ok)throw Error(\"Could not fetch data from that resource\");return res.json();}).then(data=>{setDatas(data);setIsPending(false);setError(null);}).catch(err=>{setError(err.message);setIsPending(false);});},[url]);return{datas,setDatas,isPending,error};};export default useFetch;","map":{"version":3,"sources":["/home/misa/Complete-React-Tutorial/dojo-blog/src/hooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","datas","setDatas","isPending","setIsPending","error","setError","fetch","then","res","ok","Error","json","data","catch","err","message"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,KAAMC,CAAAA,QAAQ,CAAIC,GAAD,EAAS,CACxB,KAAM,CAACC,KAAD,CAAQC,QAAR,EAAoBJ,QAAQ,CAAC,IAAD,CAAlC,CACA,KAAM,CAACK,SAAD,CAAYC,YAAZ,EAA4BN,QAAQ,CAAC,IAAD,CAA1C,CACA,KAAM,CAACO,KAAD,CAAQC,QAAR,EAAoBR,QAAQ,CAAC,IAAD,CAAlC,CAEAD,SAAS,CAAC,IAAM,CACdU,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,GAAD,EAAS,CACb,GAAI,CAACA,GAAG,CAACC,EAAT,CAAa,KAAMC,CAAAA,KAAK,CAAC,yCAAD,CAAX,CACb,MAAOF,CAAAA,GAAG,CAACG,IAAJ,EAAP,CACD,CAJH,EAKGJ,IALH,CAKSK,IAAD,EAAU,CACdX,QAAQ,CAACW,IAAD,CAAR,CACAT,YAAY,CAAC,KAAD,CAAZ,CACAE,QAAQ,CAAC,IAAD,CAAR,CACD,CATH,EAUGQ,KAVH,CAUUC,GAAD,EAAS,CACdT,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR,CACAZ,YAAY,CAAC,KAAD,CAAZ,CACD,CAbH,EAcD,CAfQ,CAeN,CAACJ,GAAD,CAfM,CAAT,CAiBA,MAAO,CAAEC,KAAF,CAASC,QAAT,CAAmBC,SAAnB,CAA8BE,KAA9B,CAAP,CACD,CAvBD,CAyBA,cAAeN,CAAAA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useFetch = (url) => {\n  const [datas, setDatas] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"http://localhost:3001/blogs\")\n      .then((res) => {\n        if (!res.ok) throw Error(\"Could not fetch data from that resource\");\n        return res.json();\n      })\n      .then((data) => {\n        setDatas(data);\n        setIsPending(false);\n        setError(null);\n      })\n      .catch((err) => {\n        setError(err.message);\n        setIsPending(false);\n      });\n  }, [url]);\n\n  return { datas, setDatas, isPending, error };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}