{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [datas, setDatas] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(url, {}).then(res => {\n      if (!res.ok) throw Error(\"Could not fetch data from that resource\");\n      return res.json();\n    }).then(data => {\n      setDatas(data);\n      setIsPending(false);\n      setError(null);\n    }).catch(err => {\n      setError(err.message);\n      setIsPending(false);\n    });\n  }, [url]);\n  return {\n    datas,\n    setDatas,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"q7pI89a5fkjsb2DSdsLHWu49alI=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/misa/joov-tek/src/hooks/useFetch.js"],"names":["useEffect","useState","useFetch","url","datas","setDatas","isPending","setIsPending","error","setError","fetch","then","res","ok","Error","json","data","catch","err","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,KAAK,CAACP,GAAD,EAAM,EAAN,CAAL,CAGGQ,IAHH,CAGQC,GAAG,IAAI;AACX,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa,MAAMC,KAAK,CAAC,yCAAD,CAAX;AACb,aAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,KANH,EAOGJ,IAPH,CAOQK,IAAI,IAAI;AACZX,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACAT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAXH,EAYGQ,KAZH,CAYUC,GAAD,IAAS;AACdT,MAAAA,QAAQ,CAACS,GAAG,CAACC,OAAL,CAAR;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfH;AAgBD,GAjBQ,EAiBN,CAACJ,GAAD,CAjBM,CAAT;AAmBA,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,SAAnB;AAA8BE,IAAAA;AAA9B,GAAP;AACD,CAzBD;;GAAMN,Q;;AA2BN,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useFetch = (url) => {\n  const [datas, setDatas] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(url, {\n      \n    })\n      .then(res => {\n        if (!res.ok) throw Error(\"Could not fetch data from that resource\");\n        return res.json();\n      })\n      .then(data => {\n        setDatas(data);\n        setIsPending(false);\n        setError(null);\n      })\n      .catch((err) => {\n        setError(err.message);\n        setIsPending(false);\n      });\n  }, [url]);\n\n  return { datas, setDatas, isPending, error };\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}